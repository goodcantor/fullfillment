from telethon import TelegramClient, events
import random
import asyncio

# –¢–µ–ª–µ–≥—Ä–∞–º API-–∫–ª—é—á–∏
api_id = 20290530
api_hash = '605c849a8c71e5952db576c39dd0201a'

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
channel_id = -1002673291270  

client = TelegramClient('anon', api_id, api_hash)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
keywords = [
    '—Ñ—É–ª–ª—Ñ–∏–ª–º–µ–Ω—Ç', '—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç', '—Ñ—É–ª–ª—Ñ–∏–ª–∏–º–µ–Ω—Ç', '—Ñ—É–ª—Ñ–∏–ª–∏–º–µ–Ω—Ç', '—Ñ—Ñ–∏–ª–º–µ–Ω—Ç', '—Ñ—É–ª—Ñ–∏–ª–º–µ—Ç–Ω', "—Ñ—Ñ",
    '—Ñ—É–ª—Ñ–µ–ª–º–µ–Ω—Ç', '—Ñ—É–ª—Ñ–∏–ª–ª–º–µ–Ω—Ç', '—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω', '—Ñ—É–ª—Ñ–∏–ª–º–µ—Ç', '—Ñ—É–ª–ª—Ñ–∏–ª–º–µ—Ç', '—Ñ—É–ª—Ñ–∏–ª–∏–º–Ω–µ—Ç', '—Ñ–∏–ª–º–µ–Ω—Ç', '—Ñ–∏–ª–ª–º–µ–Ω—Ç',
]

# –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
banned_words = [
    '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π', '–≥—Ä–∞—Ñ–∏–∫–∞',
    '–ø—Ä–µ–¥–ª–∞–≥–∞—é', '–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç', '–ø—Ä–µ–¥–ª–∞–≥–∞–µ–º', '–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ', '–ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç',
    '–ø—Ä–µ–¥–ª–æ–∂–∏–ª', '–ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞', '–ø—Ä–µ–¥–ª–æ–∂–∏–ª–æ', '–ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏',
    '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–ø—Ä–µ–¥–ª–æ–∂—É', '–ø—Ä–µ–¥–ª–æ–∂–∏–º', '–ø—Ä–µ–¥–ª–æ–∂–∏—à—å', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ',
]

# –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
banned_usernames = ['grouphelpbot', 'bgdnbgdn', 'birinim', 'zamerova21', 'Jose8Per', 'Tagranovich']

@client.on(events.NewMessage(incoming=True))
async def handler(event):
    try:
        if event.is_private:
            return

        sender = await event.get_sender()
        chat = await event.get_chat()
        message_id = event.id
        sender_username = getattr(sender, 'username', '').lower() if sender.username else ''
        message_text = getattr(event, 'raw_text', '')

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç {sender_username} –≤ —á–∞—Ç–µ {chat.id}: {message_text[:50]}...")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if sender_username.endswith('bot') or len(message_text) > 200:
            return
        
        if any(word.lower() in message_text.lower() for word in banned_words):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        if sender_username not in banned_usernames and any(word.lower() in message_text.lower() for word in keywords):
            sender_name = getattr(sender, 'first_name', '–ù–µ—Ç –∏–º–µ–Ω–∏')
            if hasattr(sender, 'last_name') and sender.last_name:
                sender_name += f" {sender.last_name}"

            profile_link = f"@{sender_username}" if sender.username else f"tg://openmessage?user_id={sender.id}"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            chat_link = f"https://t.me/{chat.username}" if chat.username else f"tg://resolve?domain={chat.id}"
            chat_id_str = str(chat.id).replace('-100', '')  # –ü—Ä–∏–≤–æ–¥–∏–º ID –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            message_link = f"https://t.me/c/{chat_id_str}/{message_id}" if chat.id < 0 else f"https://t.me/{chat.username}/{message_id}"

            message_to_send = (
                f"üîî **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!**\n\n"
                f"üë§ **–û—Ç:** {sender_name}\n"
                f"üìå **–ü—Ä–æ—Ñ–∏–ª—å:** {profile_link}\n"
                f"üì© **–°–æ–æ–±—â–µ–Ω–∏–µ:** {message_link}\n"
                f"üí¨ **–ß–∞—Ç:** {chat_link}\n\n"
                f"‚úâÔ∏è **–¢–µ–∫—Å—Ç:**\n```{message_text}```"
            )

            # –†–∞–Ω–¥–æ–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            delay = random.uniform(10, 35)
            await asyncio.sleep(delay)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(channel_id, message_to_send)
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel_id}")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    await client.start()
    print("üîµ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
    await client.run_until_disconnected()

if __name__ == "__main__":
    client.loop.run_until_complete(main())
